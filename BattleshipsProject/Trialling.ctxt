#BlueJ class context
comment0.target=Trialling
comment1.params=args
comment1.target=void\ main(java.lang.String[])
comment10.params=x\ y\ dir\ length\ ship\ grid
comment10.target=java.lang.String[][]\ shipPlacement(int,\ int,\ java.lang.String,\ int,\ java.lang.String,\ java.lang.String[][])
comment10.text=\r\n\ Takes\ the\ player\ input\ for\ x,\ y,\ and\ direction\r\n\ Places\ a\ ship\ on\ the\ player\ grid\ using\ those\ values\r\n\ Returns\ new\ grid\r\n
comment11.params=h\ w\ pGrid\ cGrid
comment11.target=void\ gridPrinter(int,\ int,\ java.lang.String[][],\ java.lang.String[][])
comment11.text=\r\n\ Clears\ the\ screen,\ then\ prints\ out\ the\ computer\ and\ player\ grids,\ with\ labels\ for\ the\ player\ above\ each\r\n
comment12.params=grid\ blank\ letters\ h\ w
comment12.target=java.lang.String[][]\ gridFiller(java.lang.String[][],\ java.lang.String,\ java.lang.String[],\ int,\ int)
comment12.text=\r\n\ Takes\ a\ 2d\ array\ and\ fills\ it\ with\ values\ to\ make\ a\ 'blank'\ starting\ grid\ with\ labels\ on\ x\ and\ y\ axes\ \r\n
comment2.params=msg1\ msg2\ msg3\ placingX
comment2.target=int\ getXInput(java.lang.String,\ java.lang.String,\ java.lang.String,\ int)
comment2.text=\r\n\ Takes\ player\ input\ for\ an\ x\ coordinate\ and\ checks\ that\ it\ is\ valid\r\n\ Has\ to\ be\ an\ integer\ and\ between\ 1\ and\ 10\r\n\ If\ it\ fails\ an\ error\ message\ is\ printed\ and\ a\ new\ coordinate\ is\ requested\r\n\ Once\ it\ has\ recieved\ valid\ input\ it\ returns\ the\ input\r\n
comment3.params=letters
comment3.target=int\ getYInput(java.lang.String[])
comment3.text=\r\n\ Takes\ player\ input\ for\ an\ y\ coordinate\ and\ checks\ that\ it\ is\ valid\r\n\ Has\ to\ be\ included\ in\ the\ array\ of\ letters\ (A-J)\r\n\ If\ it\ fails\ an\ error\ message\ is\ printed\ and\ a\ new\ coordinate\ is\ requested\r\n\ Once\ it\ has\ recieved\ valid\ input\ it\ converts\ it\ to\ a\ number\ and\ returns\ the\ number\r\n
comment4.params=msg
comment4.target=void\ winMessage(java.lang.String)
comment4.text=\r\n\ Prints\ out\ a\ win\ message\ depending\ on\ whether\ player\ or\ computer\ won\r\n
comment5.params=
comment5.target=boolean\ replayChecker()
comment6.params=grid\ ship\ h\ w
comment6.target=boolean\ playerWinChecker(java.lang.String[][],\ java.lang.String,\ int,\ int)
comment6.text=\r\n\ Checks\ if\ the\ player\ has\ won\r\n\ For\ each\ tile\ on\ the\ grid,\ if\ it\ contains\ a\ ship,\ add\ 1\ to\ n\r\n\ If\ n\ equals\ 0\ then\ there\ are\ no\ ships\ left\ and\ therefore\ the\ player\ has\ won\r\n\ Otherwise\ there\ are\ still\ ships\ left\ and\ the\ player\ hasn't\ won\r\n
comment7.params=grid\ ship\ h\ w
comment7.target=boolean\ computerWinChecker(java.lang.String[][],\ java.lang.String,\ int,\ int)
comment7.text=\r\n\ Checks\ if\ the\ computer\ has\ won\r\n\ For\ each\ tile\ on\ the\ grid,\ if\ it\ contains\ a\ ship,\ add\ 1\ to\ n\r\n\ If\ n\ equals\ 0\ then\ there\ are\ no\ ships\ left\ and\ therefore\ the\ computer\ has\ won\r\n\ Otherwise\ there\ are\ still\ ships\ left\ and\ the\ computer\ hasn't\ won\r\n
comment8.params=grid\ h\ w\ ship
comment8.target=boolean\ sunkShipChecker(java.lang.String[][],\ int,\ int,\ java.lang.String)
comment8.text=\r\n\ Takes\ the\ tile\ that\ has\ just\ been\ hit\r\n\ For\ each\ tile\ on\ the\ grid,\ if\ it\ contains\ that\ ship,\ add\ 1\ to\ n\r\n\ If\ n\ equals\ 0\ then\ there\ is\ none\ of\ that\ ship\ left\ and\ therefore\ the\ ship\ has\ been\ sunk\r\n\ Otherwise\ there\ is\ still\ some\ of\ that\ ship\ left\ and\ it\ hasnt\ been\ sunk\r\n
comment9.params=grid\ SHIPS\ ship\ letters
comment9.target=java.lang.String[][]\ computerShipPlacement(java.lang.String[][],\ int,\ java.lang.String,\ java.lang.String[])
comment9.text=\r\n\ This\ function\ places\ the\ computer\ ships\r\n\ Sets\ the\ length\ of\ the\ ship\r\n\ Chooses\ a\ random\ direction,\ and\ then\ generates\ random\ x\ and\ y\ coordinates\ that\ will\ be\ within\ the\ grids\ bounds\r\n\ Then\ checks\ for\ overlap\ with\ existing\ ships.\ If\ there\ is\ some\ overlap\ it\ will\ randomise\ x\ and\ y\ until\ there\ is\ none\r\n\ Places\ a\ ship\ and\ then\ repeats\ until\ all\ ships\ are\ placed\ and\ then\ returns\ the\ grid\ with\ ships\ in\ it\r\n
numComments=13
